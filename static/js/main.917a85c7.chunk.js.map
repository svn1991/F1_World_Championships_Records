{"version":3,"sources":["CacheData/CacheData.js","Loader/Loader.js","Races/Races.js","Seasons/Seasons.js","index.js"],"names":["storage","window","localStorage","url","Loader","react_default","a","createElement","id","Races","props","year","seasonWinner","_useState","useState","_useState2","Object","slicedToArray","races","setRaces","useEffect","racesUrl","concat","Promise","resolve","JSON","parse","getItem","axios","get","then","response","data","MRData","RaceTable","setItem","stringify","catch","err","console","log","getRacesInfoFrom","raceObject","forEach","race","index","round","raceName","raceUrl","winner","Results","Driver","className","keys","length","Loader_Loader","lib_default","keyField","map","raceKey","href","driverId","givenName","familyName","columns","dataField","text","condensed","bordered","Seasons","startYear","endYear","seasons","setSeasons","isSubscribed","seasonRangeUrl","SeasonTable","getSeasonsInfoFrom","winnerPromises","valueObject","winnerUrl","driver","StandingsTable","StandingsLists","DriverStandings","winningYearRecord","getWinnerForYear","season","all","winners","seasonObject","expandRow","onlyOneExpanding","showExpandColumn","renderer","row","Races_Races","winnerId","expandHeaderColumnRenderer","_ref","isAnyExpands","expandColumnRenderer","_ref2","expanded","rootElement","document","getElementById","ReactDOM","render","Seasons_Seasons"],"mappings":"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","file":"static/js/main.917a85c7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst storage = window.localStorage;\r\nconst url = \"https://ergast.com/api/f1\";\r\n\r\nexport function getSeasonsInfoFrom(startYear, endYear) {\r\n  const seasonRangeUrl = `${url}/seasons.json?limit=${endYear -\r\n    startYear +\r\n    1}&offset=${startYear - 1950}`;\r\n  if (!storage[seasonRangeUrl]) {\r\n    return axios\r\n      .get(seasonRangeUrl)\r\n      .then(response => {\r\n        const { data } = response;\r\n        const { MRData } = data;\r\n        const seasons = MRData.SeasonTable.Seasons;\r\n        storage.setItem(seasonRangeUrl, JSON.stringify(seasons));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        storage.setItem(seasonRangeUrl, JSON.stringify([]));\r\n      })\r\n      .then(() => {\r\n        return JSON.parse(storage.getItem(seasonRangeUrl));\r\n      });\r\n  } else {\r\n    return Promise.resolve(JSON.parse(storage.getItem(seasonRangeUrl)));\r\n  }\r\n}\r\n\r\nexport function getWinnerForYear(year) {\r\n  const winnerUrl = `${url}/${year}/driverStandings/1.json`;\r\n  if (!storage[winnerUrl]) {\r\n    return axios\r\n      .get(winnerUrl)\r\n      .then(response => {\r\n        const { data } = response;\r\n        const { MRData } = data;\r\n\r\n        const driver =\r\n          MRData.StandingsTable.StandingsLists[0].DriverStandings[0].Driver;\r\n        driver.winningYearRecord = year;\r\n        storage.setItem(winnerUrl, JSON.stringify(driver));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        storage.setItem(winnerUrl, JSON.stringify({}));\r\n      })\r\n      .then(() => {\r\n        return JSON.parse(storage.getItem(winnerUrl));\r\n      });\r\n  } else {\r\n    return Promise.resolve(JSON.parse(storage.getItem(winnerUrl)));\r\n  }\r\n}\r\n\r\nexport function getRacesInfoFrom(year) {\r\n  const racesUrl = `${url}/${year}/results/1.json`;\r\n  if (!storage[racesUrl]) {\r\n    return axios\r\n      .get(racesUrl)\r\n      .then(response => {\r\n        const { data } = response;\r\n        const { MRData } = data;\r\n\r\n        const races = MRData.RaceTable.Races;\r\n        storage.setItem(racesUrl, JSON.stringify(races));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        storage.setItem(racesUrl, JSON.stringify([]));\r\n      })\r\n      .then(() => {\r\n        return JSON.parse(storage.getItem(racesUrl));\r\n      });\r\n  } else {\r\n    return Promise.resolve(JSON.parse(storage.getItem(racesUrl)));\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div id=\"loading-wrapper\">\r\n      <div id=\"loading-text\">LOADING</div>\r\n      <div id=\"loading-content\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getRacesInfoFrom } from \"../CacheData/CacheData\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Races(props) {\r\n  const { year, seasonWinner } = props;\r\n  const [races, setRaces] = useState({});\r\n\r\n  useEffect(() => {\r\n    getRacesInfoFrom(year).then(races => {\r\n      const raceObject = {};\r\n      races.forEach((race, index) => {\r\n        raceObject[race.round] = {\r\n          round: race.round,\r\n          raceName: race.raceName,\r\n          raceUrl: race.url,\r\n          winner: race.Results[0].Driver\r\n        };\r\n      });\r\n      setRaces(raceObject);\r\n    });\r\n  }, []);\r\n\r\n  function getRacesProducts() {\r\n    const raceKeys = Object.keys(races);\r\n    return raceKeys.map(raceKey => {\r\n      const race = races[raceKey];\r\n      return {\r\n        id: race.round,\r\n        race: <a href={race.url}>{race.raceName}</a>,\r\n        winner: (\r\n          <a\r\n            href={race.winner.url}\r\n            className={\r\n              race.winner.driverId === seasonWinner ? \"highlight-winner\" : \"\"\r\n            }\r\n          >\r\n            {`${race.winner.givenName} ${race.winner.familyName}`}\r\n          </a>\r\n        )\r\n      };\r\n    });\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      dataField: \"race\",\r\n      text: \"Races\"\r\n    },\r\n    {\r\n      dataField: \"winner\",\r\n      text: \"Winner\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"races-wrapper\">\r\n      <h1 className=\"races-title\">{`F1 Races for Season ${year}`}</h1>\r\n      {Object.keys(races).length === 0 ? (\r\n        <Loader />\r\n      ) : (\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={getRacesProducts()}\r\n          columns={columns}\r\n          condensed\r\n          bordered={false}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nRaces.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  seasonWinner: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Races;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getSeasonsInfoFrom, getWinnerForYear } from \"../CacheData/CacheData\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Races from \"../Races/Races\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Seasons(props) {\r\n  const { startYear, endYear } = props;\r\n  const [seasons, setSeasons] = useState({});\r\n\r\n  /**\r\n   * Get season and winner name information from API\r\n   */\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    getSeasonsInfoFrom(startYear, endYear).then(seasons => {\r\n      const winnerPromises = seasons.map(valueObject =>\r\n        getWinnerForYear(valueObject.season)\r\n      );\r\n      Promise.all(winnerPromises).then(winners => {\r\n        const seasonObject = {};\r\n        winners.forEach((winner, index) => {\r\n          const season = seasons[index];\r\n          seasonObject[season.season] = {\r\n            winner,\r\n            year: season.season,\r\n            url: season.url\r\n          };\r\n        });\r\n        if (isSubscribed) {\r\n          setSeasons(seasonObject);\r\n        }\r\n      });\r\n    });\r\n    return () => (isSubscribed = false);\r\n  }, []);\r\n\r\n  /**\r\n   * Get season and winner information organised into\r\n   * their rows and column titles\r\n   */\r\n  function getSeasonsProducts() {\r\n    const years = Object.keys(seasons);\r\n    return years.map(year => {\r\n      return {\r\n        id: year,\r\n        winnerId: seasons[year].winner.driverId,\r\n        season: <a href={seasons[year].url}>{year}</a>,\r\n        winner: (\r\n          <a href={seasons[year].winner.url}>\r\n            {`${seasons[year].winner.givenName} ${\r\n              seasons[year].winner.familyName\r\n            }`}\r\n          </a>\r\n        )\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Column headers\r\n   */\r\n  const columns = [\r\n    {\r\n      dataField: \"season\",\r\n      text: \"Season\"\r\n    },\r\n    {\r\n      dataField: \"winner\",\r\n      text: \"Winner\"\r\n    }\r\n  ];\r\n\r\n  const expandRow = {\r\n    onlyOneExpanding: true,\r\n    showExpandColumn: true,\r\n    renderer: row => <Races year={row.id} seasonWinner={row.winnerId} />,\r\n    expandHeaderColumnRenderer: ({ isAnyExpands }) => {\r\n      if (isAnyExpands) {\r\n        return <b>-</b>;\r\n      }\r\n      return <b>+</b>;\r\n    },\r\n    expandColumnRenderer: ({ expanded }) => {\r\n      if (expanded) {\r\n        return <b>-</b>;\r\n      }\r\n      return <b>...</b>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"seasons-wrapper\">\r\n      <h1 className=\"seasons-title\">\r\n        {`F1 World Championships: ${startYear}-${endYear}`}\r\n      </h1>\r\n      {Object.keys(seasons).length === 0 ? (\r\n        <Loader />\r\n      ) : (\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={getSeasonsProducts()}\r\n          columns={columns}\r\n          expandRow={expandRow}\r\n          bordered={false}\r\n          condensed\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nSeasons.propTypes = {\r\n  startYear: PropTypes.number.isRequired,\r\n  endYear: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Seasons;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Seasons from \"./Seasons/Seasons\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return <Seasons startYear={2005} endYear={2015} />;\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}