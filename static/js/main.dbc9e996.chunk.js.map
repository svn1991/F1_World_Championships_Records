{"version":3,"sources":["CacheData/CacheData.js","Loader/Loader.js","Races/Races.js","Seasons/Seasons.js","index.js"],"names":["storage","window","localStorage","url","Loader","react_default","a","createElement","id","Races","props","year","seasonWinner","_useState","useState","_useState2","Object","slicedToArray","races","setRaces","useEffect","racesUrl","concat","Promise","resolve","JSON","parse","getItem","axios","get","then","response","data","MRData","RaceTable","length","Error","setItem","stringify","catch","getRacesInfoFrom","racesResult","raceObject","forEach","race","round","raceName","raceUrl","winner","Results","Driver","className","keys","src_Loader_Loader","data-testid","lib_default","keyField","map","raceKey","href","driverId","givenName","familyName","columns","dataField","text","condensed","bordered","Seasons","startYear","endYear","seasons","setSeasons","isSubscribed","seasonRangeUrl","SeasonTable","getSeasonsInfoFrom","seasonsResults","winnerPromises","valueObject","winnerUrl","driver","StandingsTable","StandingsLists","DriverStandings","winningYearRecord","getWinnerForYear","season","all","winners","seasonObject","index","expandRow","onlyOneExpanding","showExpandColumn","renderer","row","Races_Races","parseInt","winnerId","expandHeaderColumnRenderer","_ref","isAnyExpands","expandColumnRenderer","_ref2","expanded","rootElement","document","getElementById","ReactDOM","render","Seasons_Seasons"],"mappings":"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","file":"static/js/main.dbc9e996.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst storage = window.localStorage;\r\nconst url = 'https://ergast.com/api/f1';\r\n\r\nexport function getSeasonsInfoFrom(startYear, endYear) {\r\n  const seasonRangeUrl = `${url}/seasons.json?limit=${endYear\r\n    - startYear\r\n    + 1}&offset=${startYear - 1950}`;\r\n  if (!storage[seasonRangeUrl]) {\r\n    return axios\r\n      .get(seasonRangeUrl)\r\n      .then(response => {\r\n        const { data } = response;\r\n        const { MRData } = data;\r\n        const seasons = MRData.SeasonTable.Seasons;\r\n        if (seasons.length > 0) {\r\n          storage.setItem(seasonRangeUrl, JSON.stringify(seasons));\r\n        } else {\r\n          throw Error;\r\n        }\r\n        return seasons;\r\n      })\r\n      .catch(() => {\r\n        storage.setItem(seasonRangeUrl, JSON.stringify([]));\r\n        return [];\r\n      });\r\n  }\r\n\r\n  return Promise.resolve(JSON.parse(storage.getItem(seasonRangeUrl)));\r\n}\r\n\r\nexport function getWinnerForYear(year) {\r\n  const winnerUrl = `${url}/${year}/driverStandings/1.json`;\r\n  if (!storage[winnerUrl]) {\r\n    return axios\r\n      .get(winnerUrl)\r\n      .then(response => {\r\n        const { data } = response;\r\n        const { MRData } = data;\r\n\r\n        const driver = MRData.StandingsTable.StandingsLists[0].DriverStandings[0].Driver;\r\n        driver.winningYearRecord = year;\r\n        storage.setItem(winnerUrl, JSON.stringify(driver));\r\n        return driver;\r\n      })\r\n      .catch(() => {\r\n        storage.setItem(winnerUrl, JSON.stringify({}));\r\n        return {};\r\n      });\r\n  }\r\n  return Promise.resolve(JSON.parse(storage.getItem(winnerUrl)));\r\n}\r\n\r\nexport function getRacesInfoFrom(year) {\r\n  const racesUrl = `${url}/${year}/results/1.json`;\r\n  if (!storage[racesUrl]) {\r\n    return axios\r\n      .get(racesUrl)\r\n      .then(response => {\r\n        const { data } = response;\r\n        const { MRData } = data;\r\n\r\n        const races = MRData.RaceTable.Races;\r\n        if (races.length > 0) {\r\n          storage.setItem(racesUrl, JSON.stringify(races));\r\n        } else {\r\n          throw Error;\r\n        }\r\n        return races;\r\n      })\r\n      .catch(() => {\r\n        storage.setItem(racesUrl, JSON.stringify([]));\r\n        return [];\r\n      });\r\n  }\r\n  return Promise.resolve(JSON.parse(storage.getItem(racesUrl)));\r\n}\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Loader = () => (\r\n  <div id=\"loading-wrapper\">\r\n    <div id=\"loading-text\">LOADING</div>\r\n    <div id=\"loading-content\" />\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport PropTypes from 'prop-types';\r\nimport { getRacesInfoFrom } from '../CacheData/CacheData';\r\n\r\nimport Loader from '../Loader/Loader';\r\n\r\nimport './styles.css';\r\n\r\nfunction Races(props) {\r\n  const { year, seasonWinner } = props;\r\n  const [races, setRaces] = useState({});\r\n\r\n  useEffect(() => {\r\n    getRacesInfoFrom(year).then(racesResult => {\r\n      const raceObject = {};\r\n      racesResult.forEach(race => {\r\n        raceObject[race.round] = {\r\n          round: race.round,\r\n          raceName: race.raceName,\r\n          raceUrl: race.url,\r\n          winner: race.Results[0].Driver,\r\n        };\r\n      });\r\n      setRaces(raceObject);\r\n    });\r\n  }, [year]);\r\n\r\n  function getRacesProducts() {\r\n    const raceKeys = Object.keys(races);\r\n    return raceKeys.map(raceKey => {\r\n      const race = races[raceKey];\r\n      return {\r\n        id: race.round,\r\n        race: <a href={race.raceUrl}>{race.raceName}</a>,\r\n        winner: (\r\n          <a\r\n            href={race.winner.url}\r\n            className={\r\n              race.winner.driverId === seasonWinner ? 'highlight-winner' : ''\r\n            }\r\n          >\r\n            {`${race.winner.givenName} ${race.winner.familyName}`}\r\n          </a>\r\n        ),\r\n      };\r\n    });\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      dataField: 'race',\r\n      text: 'Races',\r\n    },\r\n    {\r\n      dataField: 'winner',\r\n      text: 'Winner',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"races-wrapper\">\r\n      <h1 className=\"races-title\">{`F1 Races for Season ${year}`}</h1>\r\n      {Object.keys(races).length === 0 ? (\r\n        <Loader />\r\n      ) : (\r\n        <div data-testid=\"table\">\r\n          <BootstrapTable\r\n            keyField=\"id\"\r\n            data={getRacesProducts()}\r\n            columns={columns}\r\n            condensed\r\n            bordered={false}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nRaces.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  seasonWinner: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Races;\r\n","import React, { useState, useEffect } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport PropTypes from 'prop-types';\r\nimport { getSeasonsInfoFrom, getWinnerForYear } from '../CacheData/CacheData';\r\n\r\nimport Races from '../Races/Races';\r\nimport Loader from '../Loader/Loader';\r\n\r\nimport './styles.css';\r\n\r\nfunction Seasons(props) {\r\n  const { startYear, endYear } = props;\r\n  const [seasons, setSeasons] = useState({});\r\n\r\n  /**\r\n   * Get season and winner name information from API\r\n   */\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    getSeasonsInfoFrom(startYear, endYear).then(seasonsResults => {\r\n      // eslint-disable-next-line max-len\r\n      const winnerPromises = seasonsResults.map(valueObject => getWinnerForYear(valueObject.season));\r\n      Promise.all(winnerPromises).then(winners => {\r\n        const seasonObject = {};\r\n        winners.forEach((winner, index) => {\r\n          const season = seasonsResults[index];\r\n          seasonObject[season.season] = {\r\n            winner,\r\n            year: season.season,\r\n            url: season.url,\r\n          };\r\n        });\r\n        if (isSubscribed) {\r\n          setSeasons(seasonObject);\r\n        }\r\n      });\r\n    });\r\n    return () => {\r\n      isSubscribed = false;\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  /**\r\n   * Get season and winner information organised into\r\n   * their rows and column titles\r\n   */\r\n  function getSeasonsProducts() {\r\n    const years = Object.keys(seasons);\r\n    return years.map(year => ({\r\n      id: year,\r\n      winnerId: seasons[year].winner.driverId,\r\n      season: <a href={seasons[year].url}>{year}</a>,\r\n      winner: (\r\n        <a href={seasons[year].winner.url}>\r\n          {`${seasons[year].winner.givenName} ${\r\n            seasons[year].winner.familyName\r\n          }`}\r\n        </a>\r\n      ),\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Column headers\r\n   */\r\n  const columns = [\r\n    {\r\n      dataField: 'season',\r\n      text: 'Season',\r\n    },\r\n    {\r\n      dataField: 'winner',\r\n      text: 'Winner',\r\n    },\r\n  ];\r\n\r\n  const expandRow = {\r\n    onlyOneExpanding: true,\r\n    showExpandColumn: true,\r\n    // eslint-disable-next-line radix\r\n    renderer: row => <Races year={parseInt(row.id)} seasonWinner={row.winnerId} />,\r\n    // eslint-disable-next-line react/prop-types\r\n    expandHeaderColumnRenderer: ({ isAnyExpands }) => {\r\n      if (isAnyExpands) {\r\n        return <b>-</b>;\r\n      }\r\n      return <b>+</b>;\r\n    },\r\n    // eslint-disable-next-line react/prop-types\r\n    expandColumnRenderer: ({ expanded }) => {\r\n      if (expanded) {\r\n        return <b>-</b>;\r\n      }\r\n      return <b>...</b>;\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"seasons-wrapper\">\r\n      <h1 className=\"seasons-title\">\r\n        {`F1 World Championships: ${startYear}-${endYear}`}\r\n      </h1>\r\n      {Object.keys(seasons).length === 0 ? (\r\n        <Loader />\r\n      ) : (\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={getSeasonsProducts()}\r\n          columns={columns}\r\n          expandRow={expandRow}\r\n          bordered={false}\r\n          condensed\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nSeasons.propTypes = {\r\n  startYear: PropTypes.number.isRequired,\r\n  endYear: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Seasons;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Seasons from \"./Seasons/Seasons\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return <Seasons startYear={2005} endYear={2015} />;\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}